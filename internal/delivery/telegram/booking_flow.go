package telegram

import (
	"strconv"
	"strings"
	"telemed/internal/usecase"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *BotHandler) handleCallback(cb *tgbotapi.CallbackQuery) {
	chatID := cb.Message.Chat.ID
	data := cb.Data

	switch {
	case data == "book_appointment":
		h.handleBookingStart(chatID)

	case strings.HasPrefix(data, "spec_"):
		h.handleSpecSelected(chatID, data)

	case strings.HasPrefix(data, "doc_"):
		h.handleDoctorSelected(chatID, data)

	case strings.HasPrefix(data, "serv_"):
		h.handleServiceSelected(chatID, data)

	case strings.HasPrefix(data, "timeslot_"):
		h.handleTimeslotSelected(chatID, data)

	case data == "confirm_yes":
		h.handleBookingConfirm(chatID, true)

	case data == "confirm_no":
		h.handleBookingConfirm(chatID, false)

	case data == "ai_consultation":
		h.state[chatID] = "ai_consultation_waiting"
		msg := tgbotapi.NewMessage(chatID, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É, –∏ —è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –≤–∞—Å.")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É", "book_appointment"),
				tgbotapi.NewInlineKeyboardButtonData("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –ò–ò", "ai_consultation"),
			),
		)
		h.bot.Send(msg)
	}

	h.bot.Request(tgbotapi.NewCallback(cb.ID, ""))
}

func (h *BotHandler) handleBookingStart(chatID int64) {
	specs, err := h.doctor.GetAllSpecializations()
	if err != nil || len(specs) == 0 {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π."))
		return
	}
	if h.temp[chatID] == nil {
		h.temp[chatID] = make(map[string]string)
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, s := range specs {
		rows = append(rows,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					s.Name, "spec_"+strconv.Itoa(s.ID),
				),
			),
		)
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	h.state[chatID] = "booking_specialization"
	h.bot.Send(msg)
}

func (h *BotHandler) handleSpecSelected(chatID int64, data string) {
	parts := strings.Split(data, "_")
	specID, err := strconv.Atoi(parts[1])
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é."))
		return
	}

	h.temp[chatID]["spec_id"] = parts[1]

	for _, s := range must(h.doctor.GetAllSpecializations()) {
		if s.ID == specID {
			h.temp[chatID]["spec_name"] = s.Name
			break
		}
	}

	docs, err := h.doctor.GetDoctorsBySpecialization(specID)
	if err != nil || len(docs) == 0 {
		h.bot.Send(tgbotapi.NewMessage(chatID,
			"–ù–µ—Ç –≤—Ä–∞—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, d := range docs {
		rows = append(rows,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					d.FullName, "doc_"+strconv.Itoa(d.ID),
				),
			),
		)
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	h.state[chatID] = "booking_doctor"
	h.bot.Send(msg)
}

func (h *BotHandler) handleDoctorSelected(chatID int64, data string) {
	parts := strings.Split(data, "_")
	docID, err := strconv.Atoi(parts[1])
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–∞—á–∞."))
		return
	}

	h.temp[chatID]["doctor_id"] = parts[1]

	for _, d := range must(
		h.doctor.GetDoctorsBySpecialization(
			mustAtoi(h.temp[chatID]["spec_id"]),
		),
	) {
		if d.ID == docID {
			h.temp[chatID]["doctor_name"] = d.FullName
			break
		}
	}

	services, err := h.doctor.GetServicesByDoctor(docID)
	if err != nil || len(services) == 0 {
		h.bot.Send(tgbotapi.NewMessage(chatID,
			"–£ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥."))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, s := range services {
		rows = append(rows,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					s.Name, "serv_"+strconv.Itoa(s.ID),
				),
			),
		)
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	h.state[chatID] = "booking_service"
	h.bot.Send(msg)
}

func (h *BotHandler) handleServiceSelected(chatID int64, data string) {
	parts := strings.Split(data, "_")
	servID, err := strconv.Atoi(parts[1])
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É—Å–ª—É–≥—É."))
		return
	}

	h.temp[chatID]["service_id"] = parts[1]

	for _, s := range must(
		h.doctor.GetServicesByDoctor(
			mustAtoi(h.temp[chatID]["doctor_id"]),
		),
	) {
		if s.ID == servID {
			h.temp[chatID]["service_name"] = s.Name
			break
		}
	}

	docID := mustAtoi(h.temp[chatID]["doctor_id"])
	slots, err := h.doctor.GetAvailableTimeSlots(docID)
	if err != nil || len(slots) == 0 {
		h.bot.Send(tgbotapi.NewMessage(chatID,
			"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤."))
		return
	}

	var rows [][]tgbotapi.InlineKeyboardButton
	for _, t := range slots {
		rows = append(rows,
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(
					t.StartTime.Format("02.01.2006 15:04"),
					"timeslot_"+strconv.Itoa(t.ID),
				),
			),
		)
	}

	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:")
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(rows...)
	h.state[chatID] = "booking_timeslot"
	h.bot.Send(msg)
}

func (h *BotHandler) handleTimeslotSelected(chatID int64, data string) {
	parts := strings.Split(data, "_")
	tsID := mustAtoi(parts[1])

	h.temp[chatID]["timeslot_id"] = parts[1]

	for _, t := range must(
		h.doctor.GetAvailableTimeSlots(
			mustAtoi(h.temp[chatID]["doctor_id"]),
		),
	) {
		if t.ID == tsID {
			h.temp[chatID]["timeslot_time"] = t.StartTime.Format("02.01.2006 15:04")
			break
		}
	}

	text := "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–µ–º:\n" +
		"–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: " + h.temp[chatID]["spec_name"] + "\n" +
		"–í—Ä–∞—á: " + h.temp[chatID]["doctor_name"] + "\n" +
		"–£—Å–ª—É–≥–∞: " + h.temp[chatID]["service_name"] + "\n" +
		"–í—Ä–µ–º—è: " + h.temp[chatID]["timeslot_time"]

	yes := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞", "confirm_yes")
	no := tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç", "confirm_no")
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(yes, no),
	)

	h.state[chatID] = "booking_confirm"
	h.bot.Send(msg)
}

func (h *BotHandler) handleBookingConfirm(chatID int64, ok bool) {
	if !ok {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞."))
		delete(h.state, chatID)
		delete(h.temp, chatID)
		h.sendMainMenu(chatID)
		return
	}
	patientID, err := h.patient.GetIDByChatID(chatID)
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID,
			"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞."))
		return
	}
	docID := mustAtoi(h.temp[chatID]["doctor_id"])
	tsID := mustAtoi(h.temp[chatID]["timeslot_id"])

	// First get the timeslot to access its schedule ID and times
	slots, err := h.doctor.GetAvailableTimeSlots(docID)
	if err != nil {
		h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞."))
		return
	}

	// Find the selected timeslot
	var scheduleID int
	var startTime, endTime time.Time
	for _, slot := range slots {
		if slot.ID == tsID {
			scheduleID = slot.ScheduleID
			startTime = slot.StartTime
			endTime = slot.EndTime
			break
		}
	}

	apptID, err := h.appointment.BookAppointment(
		scheduleID, patientID, startTime, endTime,
	)

	if err != nil {
		if err == usecase.ErrSlotBooked {
			h.bot.Send(tgbotapi.NewMessage(chatID, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç."))
		} else {
			h.bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: "+err.Error()))
		}
		return
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	h.bot.Send(tgbotapi.NewMessage(chatID,
		"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!\n"+
			"–í—Ä–∞—á: "+h.temp[chatID]["doctor_name"]+"\n"+
			"–£—Å–ª—É–≥–∞: "+h.temp[chatID]["service_name"]+"\n"+
			"–í—Ä–µ–º—è: "+h.temp[chatID]["timeslot_time"],
	))

	// –ì–µ–Ω–µ—Ä–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ-—Å–µ—Å—Å–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
	if err == nil {
		h.sendVideoLink(chatID, apptID)
	}

	delete(h.state, chatID)
	delete(h.temp, chatID)
	h.sendMainMenu(chatID)
}

// Helper functions
func must[T any](v []T, err error) []T {
	if err != nil {
		return nil
	}
	return v
}

func mustAtoi(s string) int {
	i, err := strconv.Atoi(s)
	if err != nil {
		panic(err)
	}
	return i
}
